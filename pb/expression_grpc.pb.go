// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ExpressionClient is the client API for Expression service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExpressionClient interface {
	Speak(ctx context.Context, in *Sentence, opts ...grpc.CallOption) (*SpeakResponse, error)
}

type expressionClient struct {
	cc grpc.ClientConnInterface
}

func NewExpressionClient(cc grpc.ClientConnInterface) ExpressionClient {
	return &expressionClient{cc}
}

func (c *expressionClient) Speak(ctx context.Context, in *Sentence, opts ...grpc.CallOption) (*SpeakResponse, error) {
	out := new(SpeakResponse)
	err := c.cc.Invoke(ctx, "/expression.Expression/Speak", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExpressionServer is the server API for Expression service.
// All implementations must embed UnimplementedExpressionServer
// for forward compatibility
type ExpressionServer interface {
	Speak(context.Context, *Sentence) (*SpeakResponse, error)
	mustEmbedUnimplementedExpressionServer()
}

// UnimplementedExpressionServer must be embedded to have forward compatible implementations.
type UnimplementedExpressionServer struct {
}

func (UnimplementedExpressionServer) Speak(context.Context, *Sentence) (*SpeakResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Speak not implemented")
}
func (UnimplementedExpressionServer) mustEmbedUnimplementedExpressionServer() {}

// UnsafeExpressionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExpressionServer will
// result in compilation errors.
type UnsafeExpressionServer interface {
	mustEmbedUnimplementedExpressionServer()
}

func RegisterExpressionServer(s grpc.ServiceRegistrar, srv ExpressionServer) {
	s.RegisterService(&_Expression_serviceDesc, srv)
}

func _Expression_Speak_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Sentence)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpressionServer).Speak(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/expression.Expression/Speak",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpressionServer).Speak(ctx, req.(*Sentence))
	}
	return interceptor(ctx, in, info, handler)
}

var _Expression_serviceDesc = grpc.ServiceDesc{
	ServiceName: "expression.Expression",
	HandlerType: (*ExpressionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Speak",
			Handler:    _Expression_Speak_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "expression.proto",
}
