// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SpeakerClient is the client API for Speaker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpeakerClient interface {
	Play(ctx context.Context, opts ...grpc.CallOption) (Speaker_PlayClient, error)
	SetGroup(ctx context.Context, in *SetGroupRequest, opts ...grpc.CallOption) (*SpeakerDefaultResponse, error)
	SetVolume(ctx context.Context, in *SetVolumeRequest, opts ...grpc.CallOption) (*SpeakerDefaultResponse, error)
}

type speakerClient struct {
	cc grpc.ClientConnInterface
}

func NewSpeakerClient(cc grpc.ClientConnInterface) SpeakerClient {
	return &speakerClient{cc}
}

func (c *speakerClient) Play(ctx context.Context, opts ...grpc.CallOption) (Speaker_PlayClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Speaker_serviceDesc.Streams[0], "/speaker.Speaker/Play", opts...)
	if err != nil {
		return nil, err
	}
	x := &speakerPlayClient{stream}
	return x, nil
}

type Speaker_PlayClient interface {
	Send(*PlayRequest) error
	Recv() (*PlayStatus, error)
	grpc.ClientStream
}

type speakerPlayClient struct {
	grpc.ClientStream
}

func (x *speakerPlayClient) Send(m *PlayRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *speakerPlayClient) Recv() (*PlayStatus, error) {
	m := new(PlayStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *speakerClient) SetGroup(ctx context.Context, in *SetGroupRequest, opts ...grpc.CallOption) (*SpeakerDefaultResponse, error) {
	out := new(SpeakerDefaultResponse)
	err := c.cc.Invoke(ctx, "/speaker.Speaker/SetGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *speakerClient) SetVolume(ctx context.Context, in *SetVolumeRequest, opts ...grpc.CallOption) (*SpeakerDefaultResponse, error) {
	out := new(SpeakerDefaultResponse)
	err := c.cc.Invoke(ctx, "/speaker.Speaker/SetVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpeakerServer is the server API for Speaker service.
// All implementations must embed UnimplementedSpeakerServer
// for forward compatibility
type SpeakerServer interface {
	Play(Speaker_PlayServer) error
	SetGroup(context.Context, *SetGroupRequest) (*SpeakerDefaultResponse, error)
	SetVolume(context.Context, *SetVolumeRequest) (*SpeakerDefaultResponse, error)
	mustEmbedUnimplementedSpeakerServer()
}

// UnimplementedSpeakerServer must be embedded to have forward compatible implementations.
type UnimplementedSpeakerServer struct {
}

func (UnimplementedSpeakerServer) Play(Speaker_PlayServer) error {
	return status.Errorf(codes.Unimplemented, "method Play not implemented")
}
func (UnimplementedSpeakerServer) SetGroup(context.Context, *SetGroupRequest) (*SpeakerDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGroup not implemented")
}
func (UnimplementedSpeakerServer) SetVolume(context.Context, *SetVolumeRequest) (*SpeakerDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVolume not implemented")
}
func (UnimplementedSpeakerServer) mustEmbedUnimplementedSpeakerServer() {}

// UnsafeSpeakerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpeakerServer will
// result in compilation errors.
type UnsafeSpeakerServer interface {
	mustEmbedUnimplementedSpeakerServer()
}

func RegisterSpeakerServer(s grpc.ServiceRegistrar, srv SpeakerServer) {
	s.RegisterService(&_Speaker_serviceDesc, srv)
}

func _Speaker_Play_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SpeakerServer).Play(&speakerPlayServer{stream})
}

type Speaker_PlayServer interface {
	Send(*PlayStatus) error
	Recv() (*PlayRequest, error)
	grpc.ServerStream
}

type speakerPlayServer struct {
	grpc.ServerStream
}

func (x *speakerPlayServer) Send(m *PlayStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *speakerPlayServer) Recv() (*PlayRequest, error) {
	m := new(PlayRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Speaker_SetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeakerServer).SetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/speaker.Speaker/SetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeakerServer).SetGroup(ctx, req.(*SetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Speaker_SetVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeakerServer).SetVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/speaker.Speaker/SetVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeakerServer).SetVolume(ctx, req.(*SetVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Speaker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "speaker.Speaker",
	HandlerType: (*SpeakerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetGroup",
			Handler:    _Speaker_SetGroup_Handler,
		},
		{
			MethodName: "SetVolume",
			Handler:    _Speaker_SetVolume_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Play",
			Handler:       _Speaker_Play_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "speaker.proto",
}
